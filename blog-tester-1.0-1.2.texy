Nette Tester is a PHP testing tool. It is a four months since the "Tester 1.0 has been released":http://blog.nette.org/nette-tester-1-0-released and it is a few days since the version 1.2.0 is out. I would like to describe changes in detail here.

If you are interested how much your tests coverage your code, new Tester's options `--coverage cc.html` and `--coverage-src path` has been added. The first one enables coverage collecting into the file `cc.html`. You get a well-arranged HTML report. By the second one you reduce a path of anlyzed source files (since 1.2.0 you can pass a single file as path, not only a directory).

Since the parallel running shown as non-problematic, tests now run in 33 parallel threads as default. That's all.

I'll describe a next change by the example. Imagine following simple test case:
/--php
use Tester\Assert;

class MyTest extends Tester\TestCase
{
	public function testSomethig()
	{
		Assert::fail('I have no reason to be success.');
	}
}
\--
One would expect a failing test but unfortunately no, you would get the succes in the Tester 1.0. It is because a `(new MyTest)->run()` is missing. Since 1.1.0, Tester checks a number of executed assertions and reports failure if none. If you don't like this behaviour, disable it by `Tester\Environment::$checkAssertions = FALSE`.

Next changes are focused on the `Tester\Assert` class. `Assert::isEqual()` now supports recursive structures comparing. New assertion `Assert::isNan()` has been added because the PHP value `NAN` is hard to compare to anything. If you want test `NAN` value, you should defintely use this assertion. And the last is a new `Assert::count()`. It may looks not so useful, code `Assert::same( 1, count($var) )` is the same, isn't it? No, the count() assertion checks that $var is an array or it implements `\Countable` interface too. It preceeds mistakes like `count("")`.

Option `-log` has been renamed to `-l` (or long `--log`). The only reason is keeping a consistency across the options. The old name still works without warning but it may be removed in some next version. Please, update your scripts.

A new option `--stop-on-fail` has been added. It stops tests execution upon the first failing test. It brings new workflow possibilities. Try it to combine with the `--watch` option.

A completely new `Tester\FileMock` class has been introduced. It emulates real files in memory so you can easily test a code which contains functions like `fopen()`, `file_get_contentst()` or `parse_ini_file()`. Find example in the "documentation":http://tester.nette.org/#toc-stop-on-fail.

The `Tester\DomQuery` class supports HTML5 loading now. Before this, you got some PHP warnings even you loaded a valid HTML5. The only choices were to use a shut-up operator `@` or hardly mainain LibXML errors. Now, you are shielded from the PHP odd behaviour.

If you are using the `@dataProvider` in test file docblock, new method `Tester\Environment::loadData()` is for you. It returns arguments for current date provider entry.

If you are using the `@dataProvider` in the test case methods doc blocks, you can use a target method argument default values. For example, following will work:
/--
# example.ini

[one]
method = 'GET'

[two]
method = 'POST'
paylod = '{.....}'
\--

/--php
/** @dataProvider example.ini */
public function testApi($method, $paylod = NULL)
{
}
\--
...moreover you don't have to worry about the named arguments order. They will be binded by their names.

And the last most significant change is the possibility to combine the `@dataProvider`, `@testCase` and `@multiple` together in one test. It brings crazy combinations like: run every test case method for every dataprovider entry and run it 20 times.

And that's all. You can find next details in the "documentation":http://tester.nette.org/ which is up to date.

One more thing. Tester is available as a single PHAR file. Download it from the "GitHub release page":https://github.com/nette/tester/releases.
