Nette 2.2: Revolution without Side-Effects
##########################################

.[perex]
About a month ago, one of the most revolutionary versions of Nette Framework was released. This new version brings a huge change in the structure of framework -- the "main repository":https://github.com/nette/nette has been split into several standalone components.

The main repository has been physically split into following repositories:
"Application":[https://github.com/nette/application],
"Bootstrap":[https://github.com/nette/bootstrap],
"Caching":[https://github.com/nette/caching],
"ComponentModel":[https://github.com/nette/component-model],
"Nette Database":[https://github.com/nette/database],
"DI":[https://github.com/nette/di],
"Finder":[https://github.com/nette/finder],
"Forms":[https://github.com/nette/forms],
"Http":[https://github.com/nette/http],
"Latte":[https://github.com/nette/latte],
"Mail":[https://github.com/nette/mail],
"Neon":[https://github.com/nette/neon],
"PhpGenerator":[https://github.com/nette/php-generator],
"Reflection":[https://github.com/nette/reflection],
"RobotLoader":[https://github.com/nette/robot-loader],
"SafeStream":[https://github.com/nette/safe-stream],
"Security":[https://github.com/nette/security],
"Tokenizer":[https://github.com/nette/tokenizer],
"Tracy":[https://github.com/nette/tracy] and
"Utils":[https://github.com/nette/utils]. Each repository represents one component and has its own history, releases, issues, pull-requests, and, of course, `composer.json`.

Some of the components also contains the `src/Bridges` directory, which provides integration with other parts of the framework. You do not need to install the referenced parts of the framework, use of the integration bridges is optional. All required dependencies are specified in the `composer.json` file.

Although the code repository has been dramatically split into several stand-alone components, there is no need to worry - you can still "download the distribution package":http://nette.org/download or install the whole framework by including `nette/nette` in your `composer.json`.

In addition, you are able to use one of the components on its own, without installing the rest of the framework. The preferred way of getting the packages is through "composer":[https://getcomposer.org]. It will also solve dependencies between packages.

Nette 2.2 also brings several changes in API and new features.

Latte
=====

Latte was integral part of the framework for a long time and it was integrated with the rest of the framework (mainly with the `Nette\Templating` namespace). In the new release, the Latte API was completely rewritten with stand-alone usage in mind:

/---php
$latte = new Latte\Engine; // not the Nette\Latte\Engine
$latte->setTempDirectory('/path/to/cache');

$latte->addFilter('money', function($val) { return ...; });
// addFilter() replaced registerHelper() from previus releases

$latte->onCompile[] = function($latte) {
    $latte->addMacro(...);
    // if you want add some own macros, see http://goo.gl/d5A1u2
};

$latte->render('template.latte', $parameters);
// or $html = $latte->renderToString('template.latte', $parameters);
\---

Latte now handles template loading and caching. The original `FileTemplate` and the `Nette\Templating` namespace has been deprecated.

In addition, `Nette\Application` provides its own `Template`:[http://api.nette.org/2.2.1/Nette.Bridges.ApplicationLatte.Template.html] class, which replaces `FileTemplate`, and `TemplateFactory`, which creates and initializes the templates for use in presenters and controls.

Tracy
=====

The whole debugger and diagnostics classes were moved to the `Tracy` namespace. This means that the most important class, `Nette\Diagnostics\Debugger`, was renamed to much shorter `Tracy\Debugger`.

Prefix of the CSS classes in the debugger panel was changed from `nette-` to `toggle-` and the `nette-toggle-collapsed` CSS class was replaced by the pair of `tracy-toggle` and `tracy-collapsed`. In old extensions, these classes are automatically rewritten.

Other Changes
=============

Clases `ArrayHash`, `ArrayList`, `DateTime`, `Image` and `ObjectMixin` are now part of the `Utils` package and they were moved from `Nette` to the `Nette\Utils` namespace. `NetteLoader` automatically creates aliases for these classes in run-time (i.e. during the autoloading) and prints a warning each time you use a class by its old name.

`Nette\Utils\MimeTypeDetector` class was deprecated, the "Fileinfo":[http://php.net/manual/en/book.fileinfo.php] should be used directly since PHP 5.3.

Support for `@serializationVersion` attribute and custom annotation classes lookup was dropped, since it was not used and only decreased the application performance.

When an error during the link creation occurs, the returned path starts with `#error:` instead of `error`, to prevent browser errors. If you are using CSS to highlight incorrect links, please update your "CSS styles for invalid links":[https://github.com/nette/sandbox/commit/ac7a0fd2d707160426ab184442b8d68c590f8de2#diff-2].

New Features
============

The `do` parameter for forms is now transferred in the `POST` data to keep the URL more user-friendly. The form values are passed as the second parameter to the `onSuccess` callback, to spare you from writing `$form->getValues();` in each form handler. New validators, `Form::MIN` and `Form::MAX`, were introduced.

`data-` attributes in `Nette\Utils\Html` now accepts arrays. They will be automatically encoded to JSON.

New function `fetchAssoc()` was added to the Nette\Database. The usage example can be found in "test suite for ResultSet.fetchAssoc()":[https://github.com/nette/database/blob/master/tests/Database/ResultSet.fetchAssoc().phpt].

`@inject` annotations now respects aliases defined by `use` statements. This means you are no longer required to write fully qualified names when injecting dependencies.

Class `Nette\Security\Passwords`:[http://api.nette.org/2.2.0/Nette.Security.Passwords.html] with static methods for password hashing and verification was introduced. This class uses bcrypt algorithm and requires PHP 5.3.7 or higher. The bcrypt algorithm is more secure than traditionally used MD5 and SHA-* hashing, so we recommend using these functions instead. Semantics of these functions are compatible with the "Password Hashing extension":[http://www.php.net/manual/en/book.password.php] from PHP 5.5. 

Last, but not least, when defining users in the `config.neon` file, you can specify role for each user:

/---neon
nette:
    security:
        users:
            john:
                password: **********
                roles:
                    - manager
                    - reporter
\---


Conclusion
==========

Nette 2.2 splits the framework into smaller standalone components. Each component has its own repository with issue-tracking. You are able to install these components individually with composer, or install the whole framework from "distribution package":[http://nette.org/download] or by requiring `nette/nette` in `composer.json`.

This version also introduces changes in Late API to simplify its standalone usage, moves Tracy to its own namespace, and provides changes for a few other classes.

In addition, it brings new minor features to forms, HTML and database, improves `@inject` annotations used in dependency injection, and adds a new class for secure password hashing and verification.

Even though this version introduces changes in the structure of framework, it was developed with compatibility in mind and without major BC breaks. Please update your applications and report any compatibility issues you encounter.
